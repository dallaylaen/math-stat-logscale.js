(()=>{"use strict";var t={10:(t,i,s)=>{(()=>{const{Binning:i}=s(365),{Univariate:e}=s(513),r={Binning:i,Univariate:e};"undefined"!=typeof window?window.logstat=r:t.exports=r})()},365:t=>{function i(t,s,e=10){if(t===s)return t;if(t*s<0)return 0;if(s<0)return-i(-s,-t,e);if(t>s)return i(s,t,e);for(let i=1;;i*=e)if(Math.ceil(t*i)<=Math.floor(s*i))return Math.ceil(t*i)/i}t.exports={Binning:class{constructor(t={}){let i=t.base||1.001,s=t.precision||1e-9;if(!(i>1&&i<1.5))throw new Error("base must be a number between 1 and 1.5");if(i+=1e-9,i=2**(1/Math.ceil(Math.log(2)/Math.log(i))),1===i)throw new Error("base too close to 1");s=Number.parseFloat(""+s);const e=s*Math.ceil(1/(i-1));this._thresh=e,this._precision=s,this._base=i}getBase(){return this._base}getPrecision(){return this._precision}round(t){if(Number.isNaN(t+0))throw new Error("Attempt to round a non-numeric value: "+t);return t<0?-this.round(-t):t<this._thresh?Math.round(t/this._precision)*this._precision:this._thresh*this._base**Math.round(Math.log(t/this._thresh)/Math.log(this._base))}upper(t){return t<0?-this.lower(-t):(t=this.round(t))<this._thresh?t+this._precision/2:t*Math.sqrt(this._base)}lower(t){return t<0?-this.upper(-t):(t=this.round(t))<=this._thresh?t-this._precision/2:t/Math.sqrt(this._base)}shorten(t,s){return void 0===t?t:void 0===s?i(this.lower(t),this.upper(t)):i(t,s)}},shorten:i}},513:(t,i,s)=>{const{Binning:e}=s(365);class r{constructor(t){this._main=t}min(){if(!this._main._count)return;const t=this._main.getBins();return this._main.shorten(t[0][0])}max(){if(!this._main._count)return;const t=this._main.getBins();return this._main.shorten(t[t.length-1][0])}}["E","mean","quantile","stdev"].forEach((t=>{r.prototype[t]=function(i){return this._main.shorten(this._main[t](i))}})),["cdf","count"].forEach((t=>{r.prototype[t]=function(i){return this._main[t](i)}})),t.exports={Univariate:class extends e{constructor(t={}){super(t),this.storage={},this._count=0,this._cache={},this.neat=new r(this),t.bins&&this.addWeighted(t.bins)}add(...t){return this._cache={},t.forEach((t=>{const i=this.round(t);this.storage[i]||(this.storage[i]=[0,i]),this.storage[i][0]++})),this._count+=t.length,this}addWeighted(t){return this._cache={},t.forEach((t=>{const i=this.round(t[0]);this.storage[i]||(this.storage[i]=[0,i]),this.storage[i][0]+=t[1],this._count+=t[1]})),this}toJSON(){return{precision:this.getPrecision(),base:this.getBase(),bins:this.getBins()}}getBins(){return this._cache.data||(this._cache.data=Object.values(this.storage).map((t=>[t[1],t[0]])).sort(((t,i)=>t[0]-i[0]))),this._cache.data}count(){return this._count}min(){if(!this._count)return;const t=this.getBins();return this.lower(t[0][0])}max(){if(!this._count)return;const t=this.getBins();return this.upper(t[t.length-1][0])}integrate(t){let i=0;return Object.values(this.storage).forEach((s=>{i+=s[0]*t(s[1])})),i}E(t){return this._count?this.integrate(t)/this._count:void 0}mean(){return this._count?this.integrate((t=>t))/this._count:void 0}stdev(){if(this._count<2)return;const t=this.mean();return Math.sqrt(this.integrate((i=>(i-t)*(i-t)))/(this._count-1))}quantile(t){if(!this._count)return;const i=t*this._count,s=this._cumulative();let e=0,r=s.length;for(;e+1<r;){const t=Math.floor((r+e)/2);s[t][1]>=i?r=t:e=t}const n=this.lower(s[e][0]);return n+(this.upper(s[e][0])-n)*(i-s[e][1])/(s[e][2]-s[e][1])}cdf(t){return this.rawCdf(t)/this._count}rawCdf(t){if(!this._count||t<=this.min())return 0;if(t>=this.max())return this._count;const i=this._cumulative(),s=this.round(t);let e=0,r=i.length;for(;e+1<r;){const t=Math.floor((r+e)/2);i[t][0]<=s?e=t:r=t}return s>i[e][0]?i[e][2]:i[e][1]+(i[e][2]-i[e][1])*(t-this.lower(t))/(this.upper(t)-this.lower(t))}histogram(t={}){if(!this._count)return[];const i=this.min(),s=this.max(),e=t.count||10,r=[];let n=i;const h=(s-i)/e;for(let t=0;t<e;t++)r.push([this.rawCdf(n+h),n,n+=h]);for(let t=r.length;t-- >1;)r[t][0]-=r[t-1][0];if(r[0][0]-=this.rawCdf(i),t.scale){let i=0;for(let t=0;t<r.length;t++)i<r[t][0]&&(i=r[t][0]);for(let s=0;s<r.length;s++)r[s][0]=r[s][0]*t.scale/i}return r}_cumulative(){if(!this._cache.cumulative){const t=this.getBins(),i=[];let s=0;for(let e=0;e<t.length;e++)i.push([t[e][0],s,s+=t[e][1]]);this._cache.cumulative=i}return this._cache.cumulative}}}}},i={};!function s(e){var r=i[e];if(void 0!==r)return r.exports;var n=i[e]={exports:{}};return t[e](n,n.exports,s),n.exports}(10)})();