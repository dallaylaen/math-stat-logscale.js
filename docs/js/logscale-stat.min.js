(()=>{"use strict";var t={10:(t,s,e)=>{(()=>{const{Binning:s}=e(365),{Univariate:i}=e(513),r={Binning:s,Univariate:i};"undefined"!=typeof window?window.logstat=r:t.exports=r})()},365:t=>{t.exports={Binning:class{constructor(t={}){let s=t.base||1.001,e=t.precision||1e-9;if(!(s>1&&s<1.5))throw new Error("base must be a number between 1 and 1.5");if(s+=1e-9,s=2**(1/Math.ceil(Math.log(2)/Math.log(s))),1===s)throw new Error("base too close to 1");e=Number.parseFloat(""+e);const i=e*Math.ceil(1/(s-1));this._thresh=i,this._precision=e,this._base=s}getBase(){return this._base}getPrecision(){return this._precision}round(t){if(Number.isNaN(t+0))throw new Error("Attempt to round a non-numeric value: "+t);return t<0?-this.round(-t):t<this._thresh?Math.round(t/this._precision)*this._precision:this._thresh*this._base**Math.round(Math.log(t/this._thresh)/Math.log(this._base))}upper(t){return t<0?-this.lower(-t):(t=this.round(t))<this._thresh?t+this._precision/2:t*Math.sqrt(this._base)}lower(t){return t<0?-this.upper(-t):(t=this.round(t))<=this._thresh?t-this._precision/2:t/Math.sqrt(this._base)}}}},513:(t,s,e)=>{const{Binning:i}=e(365);t.exports={Univariate:class extends i{constructor(t={}){super(t),this.storage={},this._count=0,this._cache={},t.bins&&this.addWeighted(t.bins)}add(...t){return this._cache={},t.forEach((t=>{const s=this.round(t);this.storage[s]||(this.storage[s]=[0,s]),this.storage[s][0]++})),this._count+=t.length,this}addWeighted(t){return this._cache={},t.forEach((t=>{const s=this.round(t[0]);this.storage[s]||(this.storage[s]=[0,s]),this.storage[s][0]+=t[1],this._count+=t[1]})),this}toJSON(){return{precision:this.getPrecision(),base:this.getBase(),bins:this.getBins()}}getBins(){return this._cache.data||(this._cache.data=Object.values(this.storage).map((t=>[t[1],t[0]])).sort(((t,s)=>t[0]-s[0]))),this._cache.data}count(){return this._count}min(){if(!this._count)return;const t=this.getBins();return this.lower(t[0][0])}max(){if(!this._count)return;const t=this.getBins();return this.upper(t[t.length-1][0])}integrate(t){let s=0;return Object.values(this.storage).forEach((e=>{s+=e[0]*t(e[1])})),s}expected(t){return this._count?this.integrate(t)/this._count:void 0}mean(){return this._count?this.integrate((t=>t))/this._count:void 0}stdev(){if(this._count<2)return;const t=this.mean();return Math.sqrt(this.integrate((s=>(s-t)*(s-t)))/(this._count-1))}quantile(t){if(!this._count)return;const s=t*this._count,e=this._cumulative();let i=0,r=e.length;for(;i+1<r;){const t=Math.floor((r+i)/2);e[t][1]>=s?r=t:i=t}const n=this.lower(e[i][0]);return n+(this.upper(e[i][0])-n)*(s-e[i][1])/(e[i][2]-e[i][1])}cdf(t){return this.rawCdf(t)/this._count}rawCdf(t){if(!this._count||t<=this.min())return 0;if(t>=this.max())return this._count;const s=this._cumulative(),e=this.round(t);let i=0,r=s.length;for(;i+1<r;){const t=Math.floor((r+i)/2);s[t][0]<=e?i=t:r=t}return e>s[i][0]?s[i][2]:s[i][1]+(s[i][2]-s[i][1])*(t-this.lower(t))/(this.upper(t)-this.lower(t))}histogram(t={}){if(!this._count)return[];const s=this.min(),e=this.max(),i=t.count||10,r=[];let n=s;const h=(e-s)/i;for(let t=0;t<i;t++)r.push([this.rawCdf(n+h),n,n+=h]);for(let t=r.length;t-- >1;)r[t][0]-=r[t-1][0];if(r[0][0]-=this.rawCdf(s),t.scale){let s=0;for(let t=0;t<r.length;t++)s<r[t][0]&&(s=r[t][0]);for(let e=0;e<r.length;e++)r[e][0]=r[e][0]*t.scale/s}return r}_cumulative(){if(!this._cache.cumulative){const t=this.getBins(),s=[];let e=0;for(let i=0;i<t.length;i++)s.push([t[i][0],e,e+=t[i][1]]);this._cache.cumulative=s}return this._cache.cumulative}}}}},s={};!function e(i){var r=s[i];if(void 0!==r)return r.exports;var n=s[i]={exports:{}};return t[i](n,n.exports,e),n.exports}(10)})();